#!/usr/bin/php
<?php

require_once 'Zend/Loader.php';

// Define path to application directory
defined('APPLICATION_PATH')
		|| define('APPLICATION_PATH', realpath(dirname(__FILE__)));

date_default_timezone_set('PST8PDT');

$GitCamp = new GitCamp(); 

class GitCamp { 

	public $opts;
	public $args;
	
	// Loaded from git & Basecamp
	public $subdomain;
	public $apitoken;
	public $personid;
	public $project;
	
	public $script_name;
	
	public $basecamp;

	public function __construct() {
		
		// Load Zend Classes
		Zend_Loader::loadClass('Zend_Console_Getopt');
		Zend_Loader::loadClass('Zend_Http_Client');
		Zend_Loader::loadClass('Zend_Cache');
		
		include_once( 'basecamp.php');
		
		// CLI arguments
		$this->opts = new Zend_Console_Getopt('abp:');
		if ( empty($this->args) ) { $this->args = $this->opts->getRemainingArgs(); }
		
		$this->script_name = basename($_SERVER["SCRIPT_FILENAME"]);
		
		$this->run();
	
	}
	
	public function run() {
		
		$method = ( empty($this->args[0]) ) ? 'help' : strtolower( $this->args[0] );
		
		if ($method !== 'help' && $method !== 'init') {
			$this->init();
		}
		
		if (method_exists($this, $method)) {
			$this->$method();
			
			if ($method == 'init') {
				$this->hooks();
				$this->header();
				$this->input();
			}
			
			exit;
		}
		
		// Aliases
		switch ( $method ) {
			case 'clear':
			case 'cache':
				$this->flush();
				break;
				
			case 'todos':
			case 'todo':
			case 't':
				$this->output_todos();
				exit();
				break;
		}
		
		$this->header();
		$this->input();
		
		exit(0);

	}
	
	public function help() {
?>usage: gitcamp <subcommand>

Available subcommands are:
   init      Connect a git repo to Basecamp
             Add commit hooks
             Set git camp alias
             Change settings

   todo      List all todos
             Also available as main command: todo

   flush     Flush gitcamp cache

Everything else is run for you at "git commit"

<?php
	}
	
	public function init() {
		// Called at start of $this->run()
		
		// Are we in a git repo?
		unset($return);
		exec('git status', $return, $exit);
		if ( $exit !== 0 ) {
			exit("Please run $this->script_name inside a git repository.\n");
		}
		
		// Alias
		unset($return);
		exec('git config --get alias.camp', $return);
		if (empty( $return ) ) {
			exec( "git config --global alias.camp '!gitcamp $1'" );
			$this->init();
		}
		
		// Subdomain
		unset($return);
		exec('git config --get basecamp.subdomain', $return);
		$this->subdomain = $return[0];
		if (empty( $this->subdomain) ) {
			$this->subdomain = $this->input("# Enter your Basecamp subdomain: ");
			exec( 'git config --global basecamp.subdomain ' . $this->subdomain );
			$this->init();
			
		}
		
		// API Token
		unset($return);
		exec('git config --get basecamp.apitoken', $return);
		$this->apitoken = $return[0];
		if (empty( $this->apitoken ) ) {
			$this->apitoken = $this->input("# Enter your basecamp API Token: ");
			exec( 'git config --global basecamp.apitoken ' . $this->apitoken );

			$this->init();
			
		}
		
		// Connect to Basecamp
		$this->basecamp = new Basecamp( $this->subdomain, $this->apitoken );
		
		// Person ID
		unset($return);
		exec('git config --get basecamp.personid', $return);
		$this->personid = $return[0];
		if ( empty($this->personid) ) {
			$me = $this->basecamp->current_person();
			$this->personid = $me->id;
			
			exec( 'git config --global basecamp.personid ' . $this->personid );
			
			$this->init();
			
		}
		
		// Project Name & ID
		unset($return);
		exec('git config --get basecamp.projectid', $return);
		$this->project->id = $return[0];
		
		if (empty( $this->project->id ) ) {
			echo "Loading projects...\n";

			// Show only active projects
			$projects = $this->basecamp->projects()->xpath('//project[status="active"]');

			echo "\n";
			foreach ( $projects as $key => $project ) {	
				echo "[$key] {$project->name}\n";
			}
			echo "\n";
			
			$key = $this->input('Which project is this git repo for?');
			$this->project->id = $projects[$key]->id;
			
			exec( 'git config basecamp.projectid ' . $this->project->id ); // Not global
			$this->init();
			
		}else {
			foreach ( $this->basecamp->projects() as $project ) {
				if ( $project->id == $this->project->id ) {
					$this->project->name = $project->name;
				}
			}
		}
	}
	
	public function header() {
		echo "Gitcamp setup successfully. Hooks will run on 'git commit'.\n\n";
		
		echo "Make changes?\n";
		echo "  [s]ubdomain   $this->subdomain \n";
		echo "  [p]roject     {$this->project->name} \n";
		echo "  [a]pi key     $this->apitoken \n\n";
		echo "  [c]ache flush\n";
		echo "  [q]uit\n";
	}
	
	public function hooks() {
		
		exec( 'if [ -d ./.git ]; then echo 1; else echo 0; fi', $is_git_root );
		if ( $is_git_root[0] == '0' ) {
			echo "Please run $this->script_name init from the root of your git directory.\n";
			exit;
		}else {
			exec('cp -f '.dirname(__FILE__).'/hooks/prepare-commit-msg .git/hooks/prepare-commit-msg; chmod 755 .git/hooks/prepare-commit-msg;');
			// echo "Prepare commit message hook added.\n";
			
			exec('cp -f '.dirname(__FILE__).'/hooks/commit-msg .git/hooks/commit-msg; chmod 755 .git/hooks/commit-msg;');
			// echo "Post-commit hook added.\n";
		}
		
	}
		
	public function maybe_reload( $input ) {
		
		$input = strtolower( $input[0] );
		
		switch ( $input ) {
			case 'p':
			case 'projects':
				
				exec('git config --unset basecamp.projectid');
				unset( $this->project->name, $this->project->id );

				break;
			
			case 'c':
			case 'cache':
			
				$this->basecamp->cache->clean();
			
				break;
				
			case 's':
			case 'subdomain':
				exec( 'git config --global --unset basecamp.subdomain' );
				unset( $this->subdomain );
				break;
				
			case 'a':
			case 'api':
				exec( 'git config --global --unset basecamp.apitoken' );
				unset( $this->apitoken );
				break;
				
			case 'q':
			case 'quit':
			case 'x':
			case 'exit':
			
				exit;
				break;
			default:
			
				// If input not listed, don't continue to run() below.
				return false;
			
				break;
		}
		
		$this->run();
		
	}
	
	public function input($prompt='') {
		echo "$prompt \n";
		
		$input = trim(fgets(STDIN));
		
		$this->maybe_reload( $input );
		
		return $input;
	}
	
	public function clear($out = TRUE) {
	    $clearscreen = chr(27)."[H".chr(27)."[2J";
	    if ($out) print $clearscreen;
	    else return $clearscreen;
	}
	
	public function flush() {
		$this->basecamp->cache->clean();
		exit("Cache cleared\n");
	}
	
	public function output_todos() {
		$lists = $this->basecamp->lists( $this->project->id, false); // complete = false
		
		if ( is_a($lists, 'SimpleXMLElement') ) { 
			foreach ( $lists as $list) {
				echo "\n# $list->name\n";

				$list_items = $this->basecamp->list_items( $list->id )->xpath('//todo-item');
				foreach ( $list_items as $item ) {
					echo "# $item->content #{$item->id}t\n";
				}

				$this->time_tracking_enable($list);
			}
		} 
	}
	
	public function complete() {
		
		// Extract CLI arguements to vars
		list($method, $commit_path, $source, $hash) = $this->args;
		
		exec('history', $history);
		print_r($history);
		echo "method: $method\n commit_path: $commit_path\nsource: $source\nhash:$hash\n";
		
		exit;
		exec( 'git log -n 1 --format=format:"%B"', $commit_message );

		foreach ( $commit_message as $line ) {
			if ($line[0] == '#') {continue;}
			
			preg_match('/
				[#]([0-9]{8})          # todo item ID (1)
				[\s]*                  # optional white space
				t                      # t seperator
				[\s]*                  # optional white space
				([.0-9:]*)             # time entry (2)
				[\s]*                  # optional white space
				([a-z \d !-~ \s]*)$    # description (3)
			/ix',$line, $match);
			if (!empty($match[1])) {
				
				$tasks[] = array(
					'id' => $match[1],
					'time' => $match[2],
					'description' => $match[3],
					'line' => $line,
				);
			}
		}
		
		if (empty($tasks)) {
			echo "No tasks found in last commit message.\n";
			exit;	
		}
		
		echo "# Marking tasks complete... \n";

		foreach ($tasks as $task) {
			echo '# '.$task['line'].'... ';
			
			// Time Tracking
			if ( !empty( $task['time'] ) ) {
				$this->basecamp->create_time_entry_for_item( $task['id'], array(
					'person-id' => $this->personid,
					'date' => date('Y-m-d'),
					'hours' => $task['time'],
					'description' => $task['description'],
				));
			}
			
			// Todo
			if ( $this->basecamp->complete_item( $task['id'] ) ) {
				echo "Done. \n";
			}else {
				echo "Failed. \n";
			}
		}
		$this->basecamp->cache->clean();

		exit;
	}
	
	public function time_tracking_enable($list) {
		if ( $list->tracked == 'true' ) {
			return;
		}
		
		$this->basecamp->update_list( $list->id, array('tracked' => 'true',) );
	}
	
}